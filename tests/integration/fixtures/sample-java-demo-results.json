{
  "results": [
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5,12,13"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_3"
          ],
          "createdTime": 1568883943523,
          "testId": "hasItemOutputFalse0000563cdfa670afaa0",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.hasItem:()Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void hasItemOutputFalse0000563cdfa670afaa0() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n\n  // Act and Assert result\n  Assert.assertFalse(order.hasItem());\n\n}",
          "testName": "hasItemOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_10"
          ],
          "createdTime": 1568883945179,
          "testId": "constructorOutputNotNull0009d2a39eb31cf9114",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.<init>:()V",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorOutputNotNull0009d2a39eb31cf9114() {\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.nestedobjects.subpackage.Order actual = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n\n  // Assert result\n  Assert.assertNotNull(actual);\n  Assert.assertNull(actual.item);\n\n}",
          "testName": "constructorOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/subpackage/Item.java:5",
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5,12,13,23-25"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_3"
          ],
          "createdTime": 1568883946862,
          "testId": "setItemInputNotNullOutputFalse000ca6eb9a233bab698",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.setItem:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setItemInputNotNullOutputFalse000ca6eb9a233bab698() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n\n  // Act and Assert result\n  Assert.assertFalse(order.setItem(item));\n\n  // Assert side effects\n  Assert.assertNotNull(order.item);\n  Assert.assertEquals(0, order.item.cost);\n\n}",
          "testName": "setItemInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5,32"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_3"
          ],
          "createdTime": 1568883948731,
          "testId": "getItemOutputNull0001b4c0badd4f57ddf",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.getItem:()Lcom/diffblue/javademo/nestedobjects/subpackage/Item;",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void getItemOutputNull0001b4c0badd4f57ddf() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n\n  // Act and Assert result\n  Assert.assertNull(order.getItem());\n\n}",
          "testName": "getItemOutputNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/subpackage/Item.java:5"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_0"
          ],
          "createdTime": 1568883950471,
          "testId": "constructorOutputNotNull000e36907d0d5491a5a",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Item.<init>:()V",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Item.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorOutputNotNull() {\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.nestedobjects.subpackage.Item actual = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n\n  // Assert result\n  Assert.assertNotNull(actual);\n  Assert.assertEquals(0, actual.cost);\n\n}",
          "testName": "constructorOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/Search.java:7"
          ],
          "imports": [
              "com.diffblue.javademo.Search",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "no_assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_0"
          ],
          "createdTime": 1568883952394,
          "testId": "constructorOutputNotNull000e8b0c0991a4e58fa",
          "testedFunction": "java::com.diffblue.javademo.Search.<init>:()V",
          "sourceFilePath": "com/diffblue/javademo/Search.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorOutputNotNull() {\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.Search actual = new com.diffblue.javademo.Search();\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "constructorOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/Search.java:7,12,14,20"
          ],
          "imports": [
              "com.diffblue.javademo.Search",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883954764,
          "testId": "containsInput0ZeroOutputFalse000a67f1e33f770d3a1",
          "testedFunction": "java::com.diffblue.javademo.Search.contains:([II)Z",
          "sourceFilePath": "com/diffblue/javademo/Search.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void containsInput0ZeroOutputFalse000a67f1e33f770d3a1() {\n\n  // Arrange\n  final com.diffblue.javademo.Search search = new com.diffblue.javademo.Search();\n  final int[] array = { };\n\n  // Act and Assert result\n  Assert.assertFalse(search.contains(array, 0));\n\n}",
          "testName": "containsInput0ZeroOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "org/cprover/CProverString.java:156,159",
              "java/lang/String.java:851,1585,1586",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/Search.java:7,29,30,33"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.Search",
              "org.apache.commons.codec.digest.DigestUtils",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull",
              "org.powermock.api.mockito.PowerMockito.mockStatic"
          ],
          "tags": [
              "no_reflection",
              "mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883956900,
          "testId": "isNeedleInHaystackInputNotNullOutputFalse0000bdedb26a4c7c784",
          "testedFunction": "java::com.diffblue.javademo.Search.isNeedleInHaystack:(Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/Search.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest(org.apache.commons.codec.digest.DigestUtils.class)\n@org.junit.Test\npublic void isNeedleInHaystackInputNotNullOutputFalse0000bdedb26a4c7c784() throws Exception {\n\n  // Setup mocks\n  org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.commons.codec.digest.DigestUtils.class);\n\n  // Arrange\n  final com.diffblue.javademo.Search search = new com.diffblue.javademo.Search();\n  final String input = \"foo\";\n  final java.lang.reflect.Method sha1HexMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.apache.commons.codec.digest.DigestUtils.class, \"sha1Hex\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(\"foo\").when(org.apache.commons.codec.digest.DigestUtils.class, sha1HexMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n\n  // Act\n  final boolean actual = search.isNeedleInHaystack(input);\n\n  // Assert result\n  Assert.assertFalse(actual);\n\n}\n",
          "testName": "isNeedleInHaystackInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/User.java:9,10"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "no_assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_3"
          ],
          "createdTime": 1568883958561,
          "testId": "constructorInputNotNullOutputNotNull000093d8058ff13b661",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.<init>:(Lcom/diffblue/javademo/nestedobjects/subpackage/Order;)V",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorInputNotNullOutputNotNull000093d8058ff13b661() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.nestedobjects.User actual = new com.diffblue.javademo.nestedobjects.User(order);\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "constructorInputNotNullOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Item.java:5",
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5,12,13",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/User.java:9,10,17,18"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_3"
          ],
          "createdTime": 1568883960827,
          "testId": "checkItemCostInputNotNullOutputFalse000e5fcab89dbaca23b",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNotNullOutputFalse000e5fcab89dbaca23b() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.User user = new com.diffblue.javademo.nestedobjects.User(order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n\n  // Act and Assert result\n  Assert.assertFalse(user.checkItemCost(item));\n\n}",
          "testName": "checkItemCostInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/User.java:9,10,26,27"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "no_assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_3"
          ],
          "createdTime": 1568883963374,
          "testId": "setOrderInputNotNullOutputNotNull00044fba0f6d6c2e09c",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.setOrder:(Lcom/diffblue/javademo/nestedobjects/subpackage/Order;)Lcom/diffblue/javademo/nestedobjects/User;",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setOrderInputNotNullOutputNotNull00044fba0f6d6c2e09c() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.User user = new com.diffblue.javademo.nestedobjects.User(order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Order newOrder = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n\n  // Act\n  final com.diffblue.javademo.nestedobjects.User actual = user.setOrder(newOrder);\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "setOrderInputNotNullOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:5",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/User.java:9,10,31"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_3"
          ],
          "createdTime": 1568883966195,
          "testId": "getOrderOutputNotNull000bfaa0e54934db426",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.getOrder:()Lcom/diffblue/javademo/nestedobjects/subpackage/Order;",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void getOrderOutputNotNull000bfaa0e54934db426() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.User user = new com.diffblue.javademo.nestedobjects.User(order);\n\n  // Act\n  final com.diffblue.javademo.nestedobjects.subpackage.Order actual = user.getOrder();\n\n  // Assert result\n  Assert.assertNotNull(actual);\n  Assert.assertNull(actual.getItem());\n\n}",
          "testName": "getOrderOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "no_assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_0"
          ],
          "createdTime": 1568883967962,
          "testId": "constructorOutputNotNull0004903fc78a979ff55",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.<init>:()V",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorOutputNotNull() {\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.TicTacToe actual = new com.diffblue.javademo.TicTacToe();\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "constructorOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-27,29,31,32",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_0"
          ],
          "createdTime": 1568883969562,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException000eb30b08ae19518c7",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { -2_147_483_648, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,21",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_0"
          ],
          "createdTime": 1568883969904,
          "testId": "checkTicTacToePositionInput8OutputIllegalArgumentException0014823df215f518b17",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput8OutputIllegalArgumentException() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { -2_147_483_648, 0, 0, 0, 0, 0, 0, 0 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput8OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40-42"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoDatabase",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "no_assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568883971596,
          "testId": "getInstanceOutputNotNull0004f2771e573038136",
          "testedFunction": "java::com.diffblue.javademo.serveraccess.DatabaseDao.getInstance:()Lcom/diffblue/javademo/serveraccess/DatabaseDao;",
          "sourceFilePath": "com/diffblue/javademo/serveraccess/DatabaseDao.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void getInstanceOutputNotNull0004f2771e573038136() throws Exception, java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = (com.mongodb.client.MongoDatabase) Reflector.getInstance(\"com.mongodb.client.MongoDatabase\");\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n\n  // Act\n  final com.diffblue.javademo.serveraccess.DatabaseDao actual = com.diffblue.javademo.serveraccess.DatabaseDao.getInstance();\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}\n",
          "testName": "getInstanceOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/UserAccess.java:8"
          ],
          "imports": [
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "no_assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_10"
          ],
          "createdTime": 1568883977132,
          "testId": "constructorOutputNotNull000eacb9c9cb0253214",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.<init>:()V",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorOutputNotNull000eacb9c9cb0253214() {\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.UserAccess actual = new com.diffblue.javademo.UserAccess();\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "constructorOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/UserAccess.java:8,13"
          ],
          "imports": [
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "natural_inputs",
              "phase_0"
          ],
          "createdTime": 1568883978653,
          "testId": "getCurrentUserOutputNull00063ca10ded2d9f083",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.getCurrentUser:()Ljava/lang/String;",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void getCurrentUserOutputNull() {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n\n  // Act and Assert result\n  Assert.assertNull(userAccess.getCurrentUser());\n\n}",
          "testName": "getCurrentUserOutputNull"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33,38,39"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568883980333,
          "testId": "loginUserInputNotNullNotNullOutputFalse0005f696bfc751c2092",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse0005f696bfc751c2092() throws Exception, java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"foo\";\n  final String password = \"foo\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(0L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final org.bson.Document document1 = (org.bson.Document) Reflector.getInstance(\"org.bson.Document\");\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(document1).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertFalse(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33-35"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568883980664,
          "testId": "loginUserInputNotNullNotNullOutputTrue0011fd6a71b0dfbd0fb",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputTrue0011fd6a71b0dfbd0fb() throws Exception, java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"foo\";\n  final String password = \"foo\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(1L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final org.bson.Document document1 = (org.bson.Document) Reflector.getInstance(\"org.bson.Document\");\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(document1).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertTrue(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/Search.java:7,12,14,15,20"
          ],
          "imports": [
              "com.diffblue.javademo.Search",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883989041,
          "testId": "containsInput1ZeroOutputFalse00127f3f831962d171b",
          "testedFunction": "java::com.diffblue.javademo.Search.contains:([II)Z",
          "sourceFilePath": "com/diffblue/javademo/Search.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void containsInput1ZeroOutputFalse() {\n\n  // Arrange\n  final com.diffblue.javademo.Search search = new com.diffblue.javademo.Search();\n  final int[] array = { 1 };\n\n  // Act and Assert result\n  Assert.assertFalse(search.contains(array, 0));\n\n}",
          "testName": "containsInput1ZeroOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/Search.java:7,12,14-16,20"
          ],
          "imports": [
              "com.diffblue.javademo.Search",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883989280,
          "testId": "containsInput3ZeroOutputTrue002d87e98f2d994450c",
          "testedFunction": "java::com.diffblue.javademo.Search.contains:([II)Z",
          "sourceFilePath": "com/diffblue/javademo/Search.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void containsInput3ZeroOutputTrue() {\n\n  // Arrange\n  final com.diffblue.javademo.Search search = new com.diffblue.javademo.Search();\n  final int[] array = { 1, 0, 1 };\n\n  // Act and Assert result\n  Assert.assertTrue(search.contains(array, 0));\n\n}",
          "testName": "containsInput3ZeroOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-27,29,31,32",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883999131,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException000e39ab72b63162e00",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException2() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 4, 0, 1, 2, 0, 0, 0, 0, 0 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,21",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883999517,
          "testId": "checkTicTacToePositionInput8OutputIllegalArgumentException001ea7f1bf7492be069",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput8OutputIllegalArgumentException2() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 4, 0, 1, 2, 0, 0, 0, 0 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput8OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-29,31,32",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883999735,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException002383e4bbfc89c506c",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException3() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 3, 0, 2, 1, 0, 0, 0, 1 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-32",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568883999972,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException003c9ecfc0bfd7c8d87",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException4() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 2, 1, -2_147_483_648, 2, 2, 2, 0, 0, 1 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-29,31,32",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_1"
          ],
          "createdTime": 1568884000223,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException0042bab8990f444d9f1",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException5() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 1, -2_147_483_648, 2, 2, 2, 0, 0, 1 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "org/cprover/CProverString.java:156,159",
              "java/lang/String.java:851,1585,1586",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/Search.java:7,29,30,33"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.Search",
              "org.apache.commons.codec.digest.DigestUtils",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull",
              "org.powermock.api.mockito.PowerMockito.mockStatic"
          ],
          "tags": [
              "no_reflection",
              "mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884014583,
          "testId": "isNeedleInHaystackInputNotNullOutputFalse0007ed20c42e23e0f28",
          "testedFunction": "java::com.diffblue.javademo.Search.isNeedleInHaystack:(Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/Search.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest(org.apache.commons.codec.digest.DigestUtils.class)\n@org.junit.Test\npublic void isNeedleInHaystackInputNotNullOutputFalse2() throws Exception {\n\n  // Setup mocks\n  org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.commons.codec.digest.DigestUtils.class);\n\n  // Arrange\n  final com.diffblue.javademo.Search search = new com.diffblue.javademo.Search();\n  final String input = \"?\";\n  final java.lang.reflect.Method sha1HexMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.apache.commons.codec.digest.DigestUtils.class, \"sha1Hex\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(\"\").when(org.apache.commons.codec.digest.DigestUtils.class, sha1HexMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n\n  // Act\n  final boolean actual = search.isNeedleInHaystack(input);\n\n  // Assert result\n  Assert.assertFalse(actual);\n\n}\n",
          "testName": "isNeedleInHaystackInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "org/cprover/CProverString.java:156,159",
              "java/lang/String.java:851,1585,1586,2102",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/Search.java:7,29-31"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.Search",
              "org.apache.commons.codec.digest.DigestUtils",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull",
              "org.powermock.api.mockito.PowerMockito.mockStatic"
          ],
          "tags": [
              "no_reflection",
              "mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884014785,
          "testId": "isNeedleInHaystackInputNotNullOutputTrue001bffc3865042c4b2c",
          "testedFunction": "java::com.diffblue.javademo.Search.isNeedleInHaystack:(Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/Search.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest(org.apache.commons.codec.digest.DigestUtils.class)\n@org.junit.Test\npublic void isNeedleInHaystackInputNotNullOutputTrue() throws Exception {\n\n  // Setup mocks\n  org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.commons.codec.digest.DigestUtils.class);\n\n  // Arrange\n  final com.diffblue.javademo.Search search = new com.diffblue.javademo.Search();\n  final String input = \"?\";\n  final java.lang.reflect.Method sha1HexMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.apache.commons.codec.digest.DigestUtils.class, \"sha1Hex\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(\"3b6e258214f894ab41c9deaaeb38d1fd9aeca9c7\").when(org.apache.commons.codec.digest.DigestUtils.class, sha1HexMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n\n  // Act\n  final boolean actual = search.isNeedleInHaystack(input);\n\n  // Assert result\n  Assert.assertTrue(actual);\n\n}\n",
          "testName": "isNeedleInHaystackInputNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-27,29,31,37,44-46,48,53,54,56,63,64,66,72,73,75,81"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884022741,
          "testId": "checkTicTacToePositionInput9OutputZero00073de6bcf7d85ae78",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputZero() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n  // Act and Assert result\n  Assert.assertEquals(0, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputZero"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-29,31,37,44-46,48,53,54,56,63,64,66,72,73,75,81"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884023098,
          "testId": "checkTicTacToePositionInput9OutputZero00188635581a9f1edd7",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputZero2() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 0, 0, 0, 0, 0, 0, 1, 0 };\n\n  // Act and Assert result\n  Assert.assertEquals(0, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputZero"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44,45,53,63,72,81"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884023509,
          "testId": "checkTicTacToePositionInput9OutputZero002ae99d859caebcb66",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputZero3() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 2, 2, 1, 2, 1, 0, 1, 0 };\n\n  // Act and Assert result\n  Assert.assertEquals(0, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputZero"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-32",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884024011,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException00370ad3241e21f89c5",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException6() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 2, 2, 1, 2, 1, -2_147_483_648, 1, 0 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,38",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884024308,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException004d45a4aff4a0d5e6c",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException7() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 2, 2, 2, 2, 1, 0, 1, 0 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44-47"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884024552,
          "testId": "checkTicTacToePositionInput9OutputPositive005d51f2d93d059f0b1",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 2, 0, 1, 2, 2, 1, 1, 0 };\n\n  // Act and Assert result\n  Assert.assertEquals(1, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,21",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884024807,
          "testId": "checkTicTacToePositionInput11OutputIllegalArgumentException006abd82042b60db5ff",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput11OutputIllegalArgumentException() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 2, 0, 1, 2, 2, 1, 1, 0, 0, 0 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput11OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44,45,53,54,56,63,72,81"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884025003,
          "testId": "checkTicTacToePositionInput9OutputZero007a0e2f84ad3cfc217",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputZero4() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 0, 0, 1, 2, 2, 1, 1, 0 };\n\n  // Act and Assert result\n  Assert.assertEquals(0, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputZero"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-30,37,44,45,53,63-65"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884025289,
          "testId": "checkTicTacToePositionInput9OutputPositive00876c545e1b9f8ce4a",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive2() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 1, 2, 1, 1, 2, 2, 2, 1 };\n\n  // Act and Assert result\n  Assert.assertEquals(1, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);",
              "@org.junit.Rule public final org.junit.rules.ExpectedException thrown = org.junit.rules.ExpectedException.none();"
          ],
          "coveredLines": [
              "java/lang/Throwable.java:201,280,282",
              "java/lang/Exception.java:66",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-30,37,38",
              "java/lang/Object.java:38",
              "java/lang/IllegalArgumentException.java:35",
              "java/lang/RuntimeException.java:36"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884025584,
          "testId": "checkTicTacToePositionInput9OutputIllegalArgumentException0090f28d55bfd920e4d",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputIllegalArgumentException8() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 1, 2, 1, 1, 2, 1, 2, 1 };\n\n  // Act\n  thrown.expect(IllegalArgumentException.class);\n  ticTacToe.checkTicTacToePosition(board);\n\n  // The method is not expected to return due to exception thrown\n\n}",
          "testName": "checkTicTacToePositionInput9OutputIllegalArgumentException"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-30,37,44,45,53,63,72,73,75,76"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "five_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "natural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884025880,
          "testId": "checkTicTacToePositionInput9OutputPositive01023207d5eb562e4be",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive3() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 1, 2, 1, 2, 1, 2, 2, 1 };\n\n  // Act and Assert result\n  Assert.assertEquals(2, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44,45,53,63,72-74"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884026226,
          "testId": "checkTicTacToePositionInput9OutputPositive01135c4b6f291069999",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive4() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 0, 1, 2, 1, 1, 1, 2, 2 };\n\n  // Act and Assert result\n  Assert.assertEquals(1, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44,45,53,63,72,81"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884026549,
          "testId": "checkTicTacToePositionInput9OutputZero01208ed49df668ad090",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputZero5() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 2, 2, 2, 1, 1, 2, 0, 0 };\n\n  // Act and Assert result\n  Assert.assertEquals(0, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputZero"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-30,37,44,45,53,54,56,57"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "five_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "natural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884026905,
          "testId": "checkTicTacToePositionInput9OutputPositive01364cc5454f46fe076",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive5() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 1, 1, 2, 2, 1, 1, 2, 2, 2 };\n\n  // Act and Assert result\n  Assert.assertEquals(2, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44,45,53,63,64,66,67"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "five_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "natural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884027229,
          "testId": "checkTicTacToePositionInput9OutputPositive014056debb278798b03",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive6() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 2, 2, 1, 0, 2, 0, 1, 1, 2 };\n\n  // Act and Assert result\n  Assert.assertEquals(2, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44-46,48,49,53"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "five_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "natural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884027560,
          "testId": "checkTicTacToePositionInput9OutputPositive0151d72e71d309856c8",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive7() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 0, 0, 2, 2, 1, 2, 1, 1, 2 };\n\n  // Act and Assert result\n  Assert.assertEquals(2, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/TicTacToe.java:5,20,25-31,37,44,45,53-56"
          ],
          "imports": [
              "com.diffblue.javademo.TicTacToe",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "four_star",
              "no_nulls",
              "no_exceptions",
              "high_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884027856,
          "testId": "checkTicTacToePositionInput9OutputPositive0167bff780c8dc2211e",
          "testedFunction": "java::com.diffblue.javademo.TicTacToe.checkTicTacToePosition:([I)I",
          "sourceFilePath": "com/diffblue/javademo/TicTacToe.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkTicTacToePositionInput9OutputPositive8() throws IllegalArgumentException {\n\n  // Arrange\n  final com.diffblue.javademo.TicTacToe ticTacToe = new com.diffblue.javademo.TicTacToe();\n  final int[] board = { 2, 2, 0, 0, 0, 0, 1, 1, 1 };\n\n  // Act and Assert result\n  Assert.assertEquals(1, ticTacToe.checkTicTacToePosition(board));\n\n}",
          "testName": "checkTicTacToePositionInput9OutputPositive"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/UserAccess.java:8,24,28-30,33,38,39"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884034030,
          "testId": "loginUserInputNotNullNotNullOutputFalse0008e3f06deee74f674",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse2() throws Exception, java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"?\";\n  final String password = \"?\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(0L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final org.bson.Document document1 = (org.bson.Document) Reflector.getInstance(\"org.bson.Document\");\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(document1).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertFalse(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/String.java:851",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/UserAccess.java:8,24,25"
          ],
          "imports": [
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or"
          ],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884034383,
          "testId": "loginUserInputNotNullNotNullOutputFalse0014752523ef7c8f49f",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse3() {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n\n  // Act and Assert result\n  Assert.assertFalse(userAccess.loginUser(\"?\", \"\"));\n\n}",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/UserAccess.java:8,24,28-30,33-35"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884034609,
          "testId": "loginUserInputNotNullNotNullOutputTrue0025cfa3dc9937d1552",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputTrue2() throws Exception, java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"?\";\n  final String password = \"??\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(1L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final org.bson.Document document1 = (org.bson.Document) Reflector.getInstance(\"org.bson.Document\");\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(document1).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertTrue(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/String.java:851",
              "java/lang/Object.java:38",
              "com/diffblue/javademo/UserAccess.java:8,24,25"
          ],
          "imports": [
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or"
          ],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_2"
          ],
          "createdTime": 1568884034865,
          "testId": "loginUserInputNotNullNotNullOutputFalse003ecc1755419575f7f",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse4() {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n\n  // Act and Assert result\n  Assert.assertFalse(userAccess.loginUser(\"\", \"??\"));\n\n}",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,13"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884055412,
          "testId": "hasItemOutputFalse000e94f82a1bd8e612a",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.hasItem:()Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void hasItemOutputFalse000e94f82a1bd8e612a() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  order.item = null;\n\n  // Act and Assert result\n  Assert.assertFalse(order.hasItem());\n\n}",
          "testName": "hasItemOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884055604,
          "testId": "hasItemOutputTrue0015b8d1173a38d724d",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.hasItem:()Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void hasItemOutputTrue0015b8d1173a38d724d() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n  order.item = item;\n\n  // Act and Assert result\n  Assert.assertTrue(order.hasItem());\n\n}",
          "testName": "hasItemOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,13,23-25"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568884058576,
          "testId": "setItemInputNotNullOutputFalse0003737a6fc7491dacc",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.setItem:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setItemInputNotNullOutputFalse2() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  order.item = null;\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n\n  // Act and Assert result\n  Assert.assertFalse(order.setItem(item));\n\n  // Assert side effects\n  Assert.assertNotNull(order.item);\n  Assert.assertEquals(0, order.item.cost);\n\n}",
          "testName": "setItemInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15,23-25"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568884058778,
          "testId": "setItemInputNotNullOutputTrue0017bf497705de390d9",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.setItem:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setItemInputNotNullOutputTrue() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item1 = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item1.cost = 0;\n  order.item = item1;\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n\n  // Act and Assert result\n  Assert.assertTrue(order.setItem(item));\n\n}",
          "testName": "setItemInputNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/User.java:9,10"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "no_assertions",
              "two_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568884060470,
          "testId": "constructorInputNotNullOutputNotNull0002cf88447037d3d9f",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.<init>:(Lcom/diffblue/javademo/nestedobjects/subpackage/Order;)V",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorInputNotNullOutputNotNull2() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  order.item = null;\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.nestedobjects.User actual = new com.diffblue.javademo.nestedobjects.User(order);\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "constructorInputNotNullOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,13",
              "com/diffblue/javademo/nestedobjects/User.java:17,18"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568884062103,
          "testId": "checkItemCostInputNotNullOutputFalse000d143c36ac93d8051",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNotNullOutputFalse2() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  order.item = null;\n  Reflector.setField(user, \"order\", order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n\n  // Act and Assert result\n  Assert.assertFalse(user.checkItemCost(item));\n\n}",
          "testName": "checkItemCostInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15",
              "com/diffblue/javademo/nestedobjects/User.java:17,20"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_9"
          ],
          "createdTime": 1568884062303,
          "testId": "checkItemCostInputNotNullOutputFalse00187abd2b169b79b70",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNotNullOutputFalse00187abd2b169b79b70() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item1 = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item1.cost = -2_147_483_648;\n  order.item = item1;\n  Reflector.setField(user, \"order\", order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n\n  // Act and Assert result\n  Assert.assertFalse(user.checkItemCost(item));\n\n}",
          "testName": "checkItemCostInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15",
              "com/diffblue/javademo/nestedobjects/User.java:17,20"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_9"
          ],
          "createdTime": 1568884062498,
          "testId": "checkItemCostInputNotNullOutputTrue002265c9fbbce2ca4a0",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNotNullOutputTrue002265c9fbbce2ca4a0() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item1 = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item1.cost = -2_147_483_648;\n  order.item = item1;\n  Reflector.setField(user, \"order\", order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = -2_147_483_648;\n\n  // Act and Assert result\n  Assert.assertTrue(user.checkItemCost(item));\n\n}",
          "testName": "checkItemCostInputNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/User.java:26,27"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "no_assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568884064004,
          "testId": "setOrderInputNotNullOutputNotNull0007f5e930c5d8c712b",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.setOrder:(Lcom/diffblue/javademo/nestedobjects/subpackage/Order;)Lcom/diffblue/javademo/nestedobjects/User;",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setOrderInputNotNullOutputNotNull2() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  Reflector.setField(user, \"order\", null);\n  final com.diffblue.javademo.nestedobjects.subpackage.Order newOrder = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  newOrder.item = null;\n\n  // Act\n  final com.diffblue.javademo.nestedobjects.User actual = user.setOrder(newOrder);\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "setOrderInputNotNullOutputNotNull"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:51,52"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_4"
          ],
          "createdTime": 1568884067041,
          "testId": "getCountFromDbInputNotNullNotNullOutputZero000f16edfff924ac843",
          "testedFunction": "java::com.diffblue.javademo.serveraccess.DatabaseDao.getCountFromDb:(Ljava/lang/String;Lorg/bson/Document;)I",
          "sourceFilePath": "com/diffblue/javademo/serveraccess/DatabaseDao.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoCollection.class, com.mongodb.client.MongoDatabase.class})\n@org.junit.Test\npublic void getCountFromDbInputNotNullNotNullOutputZero() throws Exception, java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.serveraccess.DatabaseDao databaseDao = (com.diffblue.javademo.serveraccess.DatabaseDao) Reflector.getInstance(\"com.diffblue.javademo.serveraccess.DatabaseDao\");\n  Reflector.setField(databaseDao, \"port\", 0);\n  Reflector.setField(databaseDao, \"hostname\", null);\n  Reflector.setField(databaseDao, \"dbName\", null);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection<org.bson.Document> mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(0L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  Reflector.setField(databaseDao, \"mongoDatabase\", mongoDatabase);\n  final org.bson.Document searchFor = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n\n  // Act and Assert result\n  Assert.assertEquals(0, databaseDao.getCountFromDb(\"foo\", searchFor));\n\n}",
          "testName": "getCountFromDbInputNotNullNotNullOutputZero"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,13,23-25"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884075478,
          "testId": "setItemInputNullOutputFalse0000710562f8687bb05",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.setItem:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setItemInputNullOutputFalse0000710562f8687bb05() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  order.item = null;\n\n  // Act and Assert result\n  Assert.assertFalse(order.setItem(null));\n\n}",
          "testName": "setItemInputNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15,23-25"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "assertions",
              "three_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884075673,
          "testId": "setItemInputNullOutputTrue0014918ca02596e9a93",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.subpackage.Order.setItem:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/subpackage/Order.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setItemInputNullOutputTrue0014918ca02596e9a93() {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item1 = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item1.cost = 0;\n  order.item = item1;\n\n  // Act and Assert result\n  Assert.assertTrue(order.setItem(null));\n\n  // Assert side effects\n  Assert.assertNull(order.item);\n\n}",
          "testName": "setItemInputNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/nestedobjects/User.java:9,10"
          ],
          "imports": [
              "com.diffblue.javademo.nestedobjects.User",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "no_reflection",
              "no_mocking",
              "no_assertions",
              "two_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884077191,
          "testId": "constructorInputNullOutputNotNull000f14c1791e5146dc0",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.<init>:(Lcom/diffblue/javademo/nestedobjects/subpackage/Order;)V",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void constructorInputNullOutputNotNull000f14c1791e5146dc0() {\n\n  // Act, creating object to test constructor\n  final com.diffblue.javademo.nestedobjects.User actual = new com.diffblue.javademo.nestedobjects.User(null);\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "constructorInputNullOutputNotNull"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,13",
              "com/diffblue/javademo/nestedobjects/User.java:17,18"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884078677,
          "testId": "checkItemCostInputNullOutputFalse0003f87bfa5669e7fc6",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNullOutputFalse0003f87bfa5669e7fc6() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  order.item = null;\n  Reflector.setField(user, \"order\", order);\n\n  // Act and Assert result\n  Assert.assertFalse(user.checkItemCost(null));\n\n}",
          "testName": "checkItemCostInputNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15",
              "com/diffblue/javademo/nestedobjects/User.java:17,20"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_5"
          ],
          "createdTime": 1568884079070,
          "testId": "checkItemCostInputNotNullOutputTrue0022e32832821f2fc17",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNotNullOutputTrue2() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item1 = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item1.cost = 0;\n  order.item = item1;\n  Reflector.setField(user, \"order\", order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n\n  // Act and Assert result\n  Assert.assertTrue(user.checkItemCost(item));\n\n}",
          "testName": "checkItemCostInputNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/User.java:26,27"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "no_assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884080708,
          "testId": "setOrderInputNullOutputNotNull000a186269e616c78d9",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.setOrder:(Lcom/diffblue/javademo/nestedobjects/subpackage/Order;)Lcom/diffblue/javademo/nestedobjects/User;",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void setOrderInputNullOutputNotNull000a186269e616c78d9() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  Reflector.setField(user, \"order\", null);\n\n  // Act\n  final com.diffblue.javademo.nestedobjects.User actual = user.setOrder(null);\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}",
          "testName": "setOrderInputNullOutputNotNull"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40-42"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "no_assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884082304,
          "testId": "getInstanceOutputNotNull000df4ffce0524f2739",
          "testedFunction": "java::com.diffblue.javademo.serveraccess.DatabaseDao.getInstance:()Lcom/diffblue/javademo/serveraccess/DatabaseDao;",
          "sourceFilePath": "com/diffblue/javademo/serveraccess/DatabaseDao.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void getInstanceOutputNotNull000df4ffce0524f2739() throws Exception {\n\n  // Arrange\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(null).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n\n  // Act\n  final com.diffblue.javademo.serveraccess.DatabaseDao actual = com.diffblue.javademo.serveraccess.DatabaseDao.getInstance();\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertNotNull(actual);\n\n}\n",
          "testName": "getInstanceOutputNotNull"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:51,52"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884083896,
          "testId": "getCountFromDbInputNullNullOutputZero000240e8d97d437904d",
          "testedFunction": "java::com.diffblue.javademo.serveraccess.DatabaseDao.getCountFromDb:(Ljava/lang/String;Lorg/bson/Document;)I",
          "sourceFilePath": "com/diffblue/javademo/serveraccess/DatabaseDao.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoCollection.class, com.mongodb.client.MongoDatabase.class})\n@org.junit.Test\npublic void getCountFromDbInputNullNullOutputZero000240e8d97d437904d() throws Exception, java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.serveraccess.DatabaseDao databaseDao = (com.diffblue.javademo.serveraccess.DatabaseDao) Reflector.getInstance(\"com.diffblue.javademo.serveraccess.DatabaseDao\");\n  Reflector.setField(databaseDao, \"port\", 0);\n  Reflector.setField(databaseDao, \"hostname\", null);\n  Reflector.setField(databaseDao, \"dbName\", null);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection<org.bson.Document> mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(0L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  Reflector.setField(databaseDao, \"mongoDatabase\", mongoDatabase);\n\n  // Act and Assert result\n  Assert.assertEquals(0, databaseDao.getCountFromDb(null, null));\n\n}",
          "testName": "getCountFromDbInputNullNullOutputZero"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33,38,39"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_5"
          ],
          "createdTime": 1568884087227,
          "testId": "loginUserInputNotNullNotNullOutputFalse0002fbdf29fd1659747",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse5() throws Exception {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"foo\";\n  final String password = \"foo\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(0L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(null).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertFalse(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33-35"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_5"
          ],
          "createdTime": 1568884087485,
          "testId": "loginUserInputNotNullNotNullOutputTrue001dc428db7a1f40c8a",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputTrue3() throws Exception {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"foo\";\n  final String password = \"foo\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(1L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(null).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertTrue(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputTrue"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33,38,39"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_9"
          ],
          "createdTime": 1568884108604,
          "testId": "loginUserInputNotNullNotNullOutputFalse0009bd811bb64afa0a6",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse0009bd811bb64afa0a6() throws Exception {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"?\";\n  final String password = \"?\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(0L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(null).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertFalse(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33-35"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_9"
          ],
          "createdTime": 1568884108872,
          "testId": "loginUserInputNotNullNotNullOutputTrue0011283edb7e0d812f2",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputTrue0011283edb7e0d812f2() throws Exception {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"?\";\n  final String password = \"?\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(1L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(null).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertTrue(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,25"
          ],
          "imports": [
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or"
          ],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_9"
          ],
          "createdTime": 1568884109316,
          "testId": "loginUserInputNotNullNotNullOutputFalse002c69a479635c59106",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse002c69a479635c59106() {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", \"\");\n\n  // Act and Assert result\n  Assert.assertFalse(userAccess.loginUser(\"\", \"?\"));\n\n}",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,25"
          ],
          "imports": [
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or"
          ],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_9"
          ],
          "createdTime": 1568884109600,
          "testId": "loginUserInputNotNullNotNullOutputFalse003dfeaa8b9e2c344a4",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse003dfeaa8b9e2c344a4() {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", \"\");\n\n  // Act and Assert result\n  Assert.assertFalse(userAccess.loginUser(\"????????????????\", \"\"));\n\n}",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15",
              "com/diffblue/javademo/nestedobjects/User.java:17,20"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884186086,
          "testId": "checkItemCostInputNotNullOutputTrue0012e32832821f2fc17",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNotNullOutputTrue3() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item1 = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item1.cost = 0;\n  order.item = item1;\n  Reflector.setField(user, \"order\", order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n\n  // Act and Assert result\n  Assert.assertTrue(user.checkItemCost(item));\n\n}",
          "testName": "checkItemCostInputNotNullOutputTrue"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "com/diffblue/javademo/nestedobjects/subpackage/Order.java:12,15",
              "com/diffblue/javademo/nestedobjects/User.java:17,20"
          ],
          "imports": [
              "java.lang.reflect.InvocationTargetException",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.nestedobjects.User",
              "com.diffblue.javademo.nestedobjects.subpackage.Item",
              "com.diffblue.javademo.nestedobjects.subpackage.Order",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "no_nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884186286,
          "testId": "checkItemCostInputNotNullOutputFalse0020260ba3b10290e03",
          "testedFunction": "java::com.diffblue.javademo.nestedobjects.User.checkItemCost:(Lcom/diffblue/javademo/nestedobjects/subpackage/Item;)Z",
          "sourceFilePath": "com/diffblue/javademo/nestedobjects/User.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void checkItemCostInputNotNullOutputFalse4() throws java.lang.reflect.InvocationTargetException {\n\n  // Arrange\n  final com.diffblue.javademo.nestedobjects.User user = (com.diffblue.javademo.nestedobjects.User) Reflector.getInstance(\"com.diffblue.javademo.nestedobjects.User\");\n  final com.diffblue.javademo.nestedobjects.subpackage.Order order = new com.diffblue.javademo.nestedobjects.subpackage.Order();\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item1 = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item1.cost = 1;\n  order.item = item1;\n  Reflector.setField(user, \"order\", order);\n  final com.diffblue.javademo.nestedobjects.subpackage.Item item = new com.diffblue.javademo.nestedobjects.subpackage.Item();\n  item.cost = 0;\n\n  // Act and Assert result\n  Assert.assertFalse(user.checkItemCost(item));\n\n}",
          "testName": "checkItemCostInputNotNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,25"
          ],
          "imports": [
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884196689,
          "testId": "loginUserInputNotNullNullOutputFalse000e80da2209fdcf9b3",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void loginUserInputNotNullNullOutputFalse() {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n\n  // Act and Assert result\n  Assert.assertFalse(userAccess.loginUser(\"\", null));\n\n}",
          "testName": "loginUserInputNotNullNullOutputFalse"
      },
      {
          "classAnnotations": [],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,25"
          ],
          "imports": [
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.javademo.UserAccess",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout"
          ],
          "staticImports": [],
          "tags": [
              "reflection",
              "no_mocking",
              "assertions",
              "two_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884197000,
          "testId": "loginUserInputNotNullNotNullOutputFalse0010b9073cc63abfe0f",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse9() {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n\n  // Act and Assert result\n  Assert.assertFalse(userAccess.loginUser(\"?\", \"\"));\n\n}",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33,38,39"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884198778,
          "testId": "loginUserInputNotNullNotNullOutputFalse0029bd811bb64afa0a6",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputFalse10() throws Exception {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"?\";\n  final String password = \"?\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(0L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(null).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertFalse(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputFalse"
      },
      {
          "classAnnotations": [
              "@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)"
          ],
          "classRules": [
              "@org.junit.Rule public final org.junit.rules.Timeout globalTimeout = new org.junit.rules.Timeout(10000);"
          ],
          "coveredLines": [
              "java/lang/Object.java:38",
              "com/diffblue/javademo/serveraccess/DatabaseDao.java:15-17,19,29-31,33,40,41,51,52",
              "java/lang/String.java:851",
              "com/diffblue/javademo/UserAccess.java:24,28-30,33-35"
          ],
          "imports": [
              "java.lang.reflect.Method",
              "com.diffblue.deeptestutils.Reflector",
              "com.diffblue.deeptestutils.mock.DTUMemberMatcher",
              "com.diffblue.javademo.UserAccess",
              "com.diffblue.javademo.serveraccess.DatabaseDao",
              "com.mongodb.MongoClient",
              "com.mongodb.client.MongoCollection",
              "com.mongodb.client.MongoDatabase",
              "org.bson.Document",
              "org.bson.conversions.Bson",
              "org.junit.Assert",
              "org.junit.Rule",
              "org.junit.Test",
              "org.junit.rules.ExpectedException",
              "org.junit.rules.Timeout",
              "org.junit.runner.RunWith",
              "org.powermock.api.mockito.PowerMockito",
              "org.powermock.core.classloader.annotations.PrepareForTest",
              "org.powermock.modules.junit4.PowerMockRunner"
          ],
          "staticImports": [
              "org.mockito.AdditionalMatchers.or",
              "org.mockito.Matchers.anyInt",
              "org.mockito.Matchers.isA",
              "org.mockito.Matchers.isNull"
          ],
          "tags": [
              "reflection",
              "mocking",
              "assertions",
              "one_star",
              "nulls",
              "no_exceptions",
              "low_complexity",
              "unnatural_inputs",
              "phase_10"
          ],
          "createdTime": 1568884199063,
          "testId": "loginUserInputNotNullNotNullOutputTrue0031283edb7e0d812f2",
          "testedFunction": "java::com.diffblue.javademo.UserAccess.loginUser:(Ljava/lang/String;Ljava/lang/String;)Z",
          "sourceFilePath": "com/diffblue/javademo/UserAccess.java",
          "testBody": "// Test written by Diffblue Cover.\n@org.powermock.core.classloader.annotations.PrepareForTest({com.mongodb.client.MongoDatabase.class, com.diffblue.javademo.UserAccess.class, com.mongodb.client.MongoCollection.class, org.bson.Document.class, com.mongodb.MongoClient.class, com.diffblue.javademo.serveraccess.DatabaseDao.class})\n@org.junit.Test\npublic void loginUserInputNotNullNotNullOutputTrue5() throws Exception {\n\n  // Arrange\n  final com.diffblue.javademo.UserAccess userAccess = new com.diffblue.javademo.UserAccess();\n  Reflector.setField(userAccess, \"currentUser\", null);\n  final String username = \"?\";\n  final String password = \"?\";\n  final com.mongodb.MongoClient mongoClient = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.MongoClient.class);\n  final com.mongodb.client.MongoDatabase mongoDatabase = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoDatabase.class);\n  final com.mongodb.client.MongoCollection mongoCollection = org.powermock.api.mockito.PowerMockito.mock(com.mongodb.client.MongoCollection.class);\n  final java.lang.reflect.Method countMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoCollection.class, \"count\", org.bson.conversions.Bson.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(1L).when(mongoCollection, countMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(org.bson.conversions.Bson.class), org.mockito.Matchers.isNull(org.bson.conversions.Bson.class)));\n  final java.lang.reflect.Method getCollectionMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.client.MongoDatabase.class, \"getCollection\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoCollection).when(mongoDatabase, getCollectionMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  final java.lang.reflect.Method getDatabaseMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(com.mongodb.MongoClient.class, \"getDatabase\", String.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(mongoDatabase).when(mongoClient, getDatabaseMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(com.mongodb.MongoClient.class).withParameterTypes(String.class, int.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.Matchers.anyInt()).thenReturn(mongoClient);\n  final org.bson.Document document = org.powermock.api.mockito.PowerMockito.mock(org.bson.Document.class);\n  final java.lang.reflect.Method appendMethod = com.diffblue.deeptestutils.mock.DTUMemberMatcher.method(org.bson.Document.class, \"append\", String.class, Object.class);\n  org.powermock.api.mockito.PowerMockito.doReturn(null).when(document, appendMethod).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class)));\n  org.powermock.api.mockito.PowerMockito.whenNew(org.bson.Document.class).withParameterTypes(String.class, Object.class).withArguments(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)), org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class), org.mockito.Matchers.isNull(Object.class))).thenReturn(document);\n\n  // Act\n  final boolean actual = userAccess.loginUser(username, password);\n\n  // Assert side effects\n  Assert.assertNotNull(Reflector.getInstanceField(com.diffblue.javademo.serveraccess.DatabaseDao.class, null, \"instance\"));\n\n  // Assert result\n  Assert.assertTrue(actual);\n\n}\n",
          "testName": "loginUserInputNotNullNotNullOutputTrue"
      }
  ],
  "cursor": 1568884356300,
  "status": {
      "status": "COMPLETED"
  }
}
